Daikon version 5.8.8, released March 2, 2021; http://plse.cs.washington.edu/daikon.
Reading declaration files .(read 1 decls file)
Processing trace data; reading 1 dtrace file:

===========================================================================
main.users{user_id}playlists.createPlaylist_201(main.createPlaylist_Input):::ENTER
input.user_id == "qenf2hlyicucelyckx7gu2n7v"
input.user_id > input.name
input.user_id > input.description
input.name > input.description
===========================================================================
main.users{user_id}playlists.createPlaylist_201(main.createPlaylist_Input):::EXIT
input == orig(input)
input.user_id == return.owner.display_name
input.user_id == return.owner.id
input.user_id == orig(input.user_id)
input.name == return.name
input.name == orig(input.name)
input.description == return.description
input.description == orig(input.description)
input.public == return.public
input.public == orig(input.public)
return.followers.total == return.owner.followers.total
return.followers.total == return.tracks.offset
return.followers.total == return.tracks.total
return.followers.total == size(return.images[])
return.followers.total == size(return.tracks.items[])
input.user_id == "qenf2hlyicucelyckx7gu2n7v"
return.collaborative == false
return.images[] == []
return.owner.external_urls.spotify == "https://open.spotify.com/user/qenf2hlyicucelyckx7gu2n7v"
return.owner.href == "https://api.spotify.com/v1/users/qenf2hlyicucelyckx7gu2n7v"
return.owner.type == "user"
return.owner.uri == "spotify:user:qenf2hlyicucelyckx7gu2n7v"
return.tracks.items[] == []
return.tracks.limit == 100
return.type == "playlist"
input.user_id > input.name
input.user_id > input.description
input.user_id > return.external_urls.spotify
input.user_id > return.href
input.user_id > return.id
input.user_id > return.owner.external_urls.spotify
input.user_id > return.owner.href
input.user_id < return.owner.type
input.user_id < return.owner.uri
input.user_id > return.snapshot_id
input.user_id > return.tracks.href
input.user_id > return.type
input.user_id < return.uri
input.name > input.description
input.name < return.external_urls.spotify
input.name < return.href
input.name > return.id
input.name < return.owner.external_urls.spotify
input.name < return.owner.href
input.name < return.owner.type
input.name < return.owner.uri
input.name > return.snapshot_id
input.name < return.tracks.href
input.name < return.type
input.name < return.uri
input.description < return.external_urls.spotify
input.description < return.href
input.description > return.id
input.description < return.owner.external_urls.spotify
input.description < return.owner.href
input.description < return.owner.type
input.description < return.owner.uri
input.description > return.snapshot_id
input.description < return.tracks.href
input.description < return.type
input.description < return.uri
return.external_urls < return.owner.external_urls
return.external_urls.spotify > return.href
return.external_urls.spotify > return.id
return.external_urls.spotify < return.owner.external_urls.spotify
return.external_urls.spotify > return.owner.href
return.external_urls.spotify < return.owner.type
return.external_urls.spotify < return.owner.uri
return.external_urls.spotify > return.snapshot_id
return.external_urls.spotify > return.tracks.href
return.external_urls.spotify < return.type
return.external_urls.spotify < return.uri
return.followers < return.owner.followers
return.href > return.id
return.href < return.owner.external_urls.spotify
return.href < return.owner.href
return.href < return.owner.type
return.href < return.owner.uri
return.href > return.snapshot_id
return.href < return.tracks.href
return.href < return.type
return.href < return.uri
return.id < return.owner.external_urls.spotify
return.id < return.owner.href
return.id < return.owner.type
return.id < return.owner.uri
return.id < return.snapshot_id
return.id < return.tracks.href
return.id < return.type
return.id < return.uri
return.owner.external_urls.spotify > return.owner.href
return.owner.external_urls.spotify < return.owner.type
return.owner.external_urls.spotify < return.owner.uri
return.owner.external_urls.spotify > return.snapshot_id
return.owner.external_urls.spotify > return.tracks.href
return.owner.external_urls.spotify < return.type
return.owner.external_urls.spotify < return.uri
return.owner.href < return.owner.type
return.owner.href < return.owner.uri
return.owner.href > return.snapshot_id
return.owner.href > return.tracks.href
return.owner.href < return.type
return.owner.href < return.uri
return.owner.type > return.owner.uri
return.owner.type > return.snapshot_id
return.owner.type > return.tracks.href
return.owner.type > return.type
return.owner.type > return.uri
return.owner.uri > return.snapshot_id
return.owner.uri > return.tracks.href
return.owner.uri > return.type
return.owner.uri > return.uri
return.snapshot_id < return.tracks.href
return.snapshot_id < return.type
return.snapshot_id < return.uri
return.tracks.href < return.type
return.tracks.href < return.uri
return.type < return.uri
Exiting Daikon.
